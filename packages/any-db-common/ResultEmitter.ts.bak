import { IAdapter, IFieldMetadata, ResultSet, Query } from './'
import { Readable, ReadableOptions } from 'stream';

export abstract class AbstractResultEmitter<Row, T extends Query<Row>> extends Readable implements IResultEmitter {
  adapter: IAdapter

  constructor(adapter: IAdapter, streamOptions: ReadableOptions) {
    super({ ...streamOptions, objectMode: true })
    this.adapter = adapter
  }

  abstract subscribe(source: T): void

  _read(n: number) {
  }

  resultSet(): Promise<ResultSet> {
    return new Promise((resolve, reject) => {
      const results = new ResultSet()
      this
        // .on('meta', metadata => results.meta = metadata)
        .on('fields', fields => results.fields = fields)
        .on('data', row => results.rows.push(row))
        .on('error', reject)
        .on('end', () => resolve(results))
    })
  }
}


export interface IResultStream<Row = {}> {
  adapter: IAdapter
  on(event: 'fields', handler: typeof fields): this
  on(event: 'data', handler: (row: Row) => any): this

  on(event: 'close', handler: typeof close): this
  on(event: 'end', handler: typeof end): this
  on(event: 'error', handler: typeof error): this
}

/**
 * A `'fields'` event is emitted before any `'data'` events.
 * 
 * One argument is passed to event listeners:
 * 
 * - `fields` - an array of [[IFieldMetadata]] objects.
 * 
 * @asMemberOf IResultemitter
 * @event
 */
declare function fields(fields: IFieldMetadata[]): any;

/**
 * A `'data'` event is emitted for each row in the query result set.
 * 
 * One argument is passed to event listeners:
 * 
 * - `row` contains the contents of a single row in the query result
 * 
 * @asMemberOf IResultemitter
 * @event
 */
declare function data<Row>(row: Row): any

/**
 * The `'error'` event is emitted at most once per query.
 * 
 * One argument is passed to event listeners:
 * 
 * - `error` - the error object.
 * 
 * @event
 */
declare function error(error: Error): any

/**
 * A `'close'` event is emitted when the query completes.
 * 
 * No arguments are passed to event listeners.
 * 
 * @event
 */
declare function close(): any

/**
 * 
 * An `'end'` event is emitted after all query results have been consumed.
 * 
 * No arguments are passed to event listeners.
 *
 * @event
 */
declare function end(): any
